// ============================
// ðŸŒŸ JavaScript Fundamentals
// ============================

// 1. VARIABLES
let name = "Clyn";
const country = "Kenya";
var age = 20;

// 2. DATA TYPES
let isStudent = true;
let score = 95.5;
let hobbies = ["coding", "music", "art"];
let student = {
  name: "Zuri",
  age: 14,
  school: "Code Lab"
};
let nothing = null;
let notSet;

// 3. STRING METHODS
console.log(name.toUpperCase());
console.log(name.length);

// 4. ARITHMETIC OPERATIONS
let a = 10, b = 3;
console.log("Sum:", a + b);
console.log("Diff:", a - b);
console.log("Multiply:", a * b);
console.log("Divide:", a / b);

// 5. COMPARISON OPERATORS
console.log(a > b);      // true
console.log(a === 10);   // true
console.log(b !== 5);    // true

// 6. LOGICAL OPERATORS
console.log(true && false); // false
console.log(true || false); // true
console.log(!true);         // false

// 7. CONDITIONALS
if (age >= 18) {
  console.log("You're an adult.");
} else {
  console.log("You're a minor.");
}

let result = age >= 18 ? "Adult" : "Minor";
console.log("Status:", result);

// 8. LOOPS
for (let i = 1; i <= 3; i++) {
  console.log("For Loop:", i);
}

let x = 0;
while (x < 3) {
  console.log("While Loop:", x);
  x++;
}

let y = 0;
do {
  console.log("Do While:", y);
  y++;
} while (y < 2);

// 9. FUNCTIONS
function greet(name) {
  return "Hello " + name;
}
console.log(greet("Clyn"));

const multiply = (x, y) => x * y;
console.log(multiply(4, 5));

function greetUser(name = "Guest") {
  console.log(`Welcome, ${name}`);
}
greetUser();
greetUser("Clinton");

// 10. ARRAYS
let fruits = ["apple", "banana", "mango"];
fruits.push("orange");
fruits.pop();
fruits.unshift("kiwi");
fruits.shift();

fruits.forEach(fruit => console.log(fruit));

let capitalized = fruits.map(f => f.toUpperCase());
console.log(capitalized);

let filtered = fruits.filter(f => f.length > 5);
console.log(filtered);

console.log(fruits.includes("banana"));
console.log(fruits.join(", "));

let some = fruits.slice(1, 3);
console.log(some);

fruits.splice(1, 1);
console.log(fruits);

// 11. OBJECTS
let person = {
  firstName: "Clinton",
  lastName: "Ochieng",
  age: 22,
  greet() {
    console.log(`Hi, I'm ${this.firstName}`);
  }
};
console.log(person.age);
person.greet();

// 12. DESTRUCTURING
let { firstName, age: userAge } = person;
console.log(firstName, userAge);

// 13. SPREAD & REST
let numbers = [1, 2, 3];
let moreNumbers = [...numbers, 4, 5];
console.log(moreNumbers);

function showAll(...args) {
  console.log("Args:", args);
}
showAll("JS", "HTML", "CSS");

// 14. CLASSES
class Animal {
  constructor(name) {
    this.name = name;
  }
  speak() {
    console.log(this.name + " makes a noise.");
  }
}
let dog = new Animal("Dog");
dog.speak();

// 15. DOM MANIPULATION (if in browser)
const heading = document.createElement("h1");
heading.innerText = "JavaScript is Awesome!";
document.body.appendChild(heading);

const para = document.createElement("p");
para.innerText = "This paragraph was added using JS.";
document.body.appendChild(para);

// 16. EVENTS
const button = document.createElement("button");
button.innerText = "Click Me";
document.body.appendChild(button);

let clickCount = 0;
button.addEventListener("click", () => {
  clickCount++;
  para.innerText = `You clicked ${clickCount} times`;
});

// 17. TEMPLATE LITERALS
let language = "JavaScript";
console.log(`I love ${language}!`);

// 18. NULLISH COALESCING & OPTIONAL CHAINING
let user = {
  profile: {
    email: "clyn@example.com"
  }
};
console.log(user?.profile?.email ?? "No email found");

// 19. SET TIMEOUT
setTimeout(() => {
  console.log("This runs after 1 second");
}, 1000);

// 20. PROMISES
let promise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("Promise completed!");
  }, 1500);
});

promise.then(msg => console.log(msg)).catch(err => console.error(err));

// 21. ASYNC / AWAIT (run in browser or Node with fetch enabled)
async function getUsers() {
  try {
    let response = await fetch("https://jsonplaceholder.typicode.com/users");
    let users = await response.json();
    console.log("Users:", users);
  } catch (err) {
    console.error("Error fetching users:", err);
  }
}
// Uncomment to run in browser
// getUsers();
